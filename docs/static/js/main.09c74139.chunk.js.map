{"version":3,"sources":["components/Error.js","components/Pregunta.js","components/Formulario.js","components/Gasto.js","components/Listado.js","Helper.js","components/ControlPresupuesto.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Pregunta","setpresupuesto","setrestante","setMostrarpregunta","useState","cantidad","setcantidad","error","setError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Formulario","setGasto","setCrearGasto","nombre","setNombre","setCantidad","trim","gasto","id","shortid","generate","nom","Gasto","Listado","gastos","map","key","revisarPresupuesto","presupesto","restante","ControlPresupuesto","presupuesto","App","mostrarpregunta","setGastos","crearGasto","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.09c74139.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Error = ({ mensaje }) => (\r\n  <p className=\"alert alert-danger error\">{mensaje}</p>\r\n);\r\n\r\nexport default Error;\r\n\r\n\r\nError.propTypes = {\r\n  mensaje: PropTypes.string.isRequired\r\n};\r\n\r\n","import React, { Fragment, useState } from \"react\";\r\nimport Error from \"./Error\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Pregunta = ({setpresupuesto, setrestante, setMostrarpregunta}) => {\r\n  const [cantidad, setcantidad] = useState(0);\r\n\r\n  const [error, setError] = useState(false);\r\n\r\n  const definirPresupuesto = e => {\r\n    setcantidad(parseInt(e.target.value));\r\n  };\r\n\r\n  const agregarPresupuesto = e => {\r\n    \r\n    e.preventDefault();\r\n\r\n    //Validar\r\n    if (cantidad < 1 || isNaN(cantidad)) {\r\n      setError(true);\r\n      return;\r\n    }\r\n    setError(false);\r\n    setpresupuesto(cantidad);\r\n    setrestante(cantidad);\r\n    setMostrarpregunta(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Coloca tu presupuesto</h2>\r\n      {error ? <Error mensaje=\"El presupuesto es incorrecto\"></Error> : null}\r\n      <form onSubmit={agregarPresupuesto}>\r\n        <input\r\n          type=\"number\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Colocar tu presupuesto\"\r\n          onChange={definirPresupuesto}\r\n        ></input>\r\n        <input\r\n          type=\"submit\"\r\n          className=\"button-primary u-full-width\"\r\n          value=\"Definir Presupuesto\"\r\n        ></input>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Pregunta;\r\n\r\n\r\nPregunta.propTypes = {\r\n  setpresupuesto: PropTypes.func.isRequired,\r\n  setrestante: PropTypes.func.isRequired,\r\n  setMostrarpregunta: PropTypes.func.isRequired\r\n};\r\n","import React, { useState } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport Error from \"./Error\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Formulario = ({setGasto, setCrearGasto}) => {\r\n  const [nombre, setNombre] = useState(\"\");\r\n  const [cantidad, setCantidad] = useState(0);\r\n  const [error, setError] = useState(false);\r\n\r\n  const agregarGasto = e => {\r\n    e.preventDefault();\r\n    //validar\r\n    if (cantidad < 1 || isNaN(cantidad) || nombre.trim() === \"\") {\r\n      setError(true);\r\n      return;\r\n    }\r\n    setError(false);\r\n    //construir gasto\r\n    const gasto = {\r\n        nombre,\r\n        cantidad,\r\n        id: shortid.generate()\r\n    }\r\n    //pasar el gasto a componente principal\r\n    setGasto(gasto);\r\n    setCrearGasto(true);\r\n    //resetear form\r\n    setNombre('');\r\n    setCantidad(0);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={agregarGasto}>\r\n      <h2>Agrega tus gastos aqu√≠</h2>\r\n      {error ? <Error mensaje=\"Ambos campos son obligatorios o Presupuesto Incorrecto\"></Error> : null}\r\n\r\n      <div className=\"campo\">\r\n        <label>Nombre Gasto</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Ej. Transporte\"\r\n          nom\r\n          value={nombre}\r\n          onChange={e => setNombre(e.target.value)}\r\n        ></input>\r\n      </div>\r\n      <div className=\"campo\">\r\n        <label>Cantidad Gasto</label>\r\n        <input\r\n          type=\"number\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Ej. 300\"\r\n          value={cantidad}\r\n          onChange={e => setCantidad(parseInt(e.target.value))}\r\n        ></input>\r\n      </div>\r\n      <input\r\n        type=\"submit\"\r\n        className=\"button-primary u-full-width\"\r\n        value=\"Agregar Gasto\"\r\n      ></input>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n\r\nFormulario.propTypes = {\r\n  setGasto: PropTypes.func.isRequired,\r\n  setCrearGasto: PropTypes.func.isRequired,\r\n};\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Gasto = ({ gasto }) => (\r\n  <li className=\"gastos\">\r\n    <p>\r\n      {gasto.nombre}\r\n      <span className=\"gasto\">$ {gasto.cantidad}</span>\r\n    </p>\r\n  </li>\r\n);\r\n\r\nexport default Gasto;\r\n\r\nGasto.propTypes = {\r\n  gasto: PropTypes.object.isRequired\r\n}\r\n","import React from \"react\";\r\nimport Gasto from \"./Gasto\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst Listado = ({ gastos }) => (\r\n  <div className=\"gastos-realizados\">\r\n    <h2>Listado</h2>\r\n    {gastos.map(gasto => (\r\n      <Gasto key={gasto.id} gasto={gasto}></Gasto>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Listado;\r\n\r\nListado.propTypes = {\r\n  gastos: PropTypes.array.isRequired\r\n}\r\n\r\n","export const revisarPresupuesto = (presupesto, restante) => {\r\n  let clase;\r\n\r\n  if (presupesto / 4 > restante) clase = \"alert alert-danger\";\r\n  else if (presupesto / 2 > restante) clase = \"alert alert-warning\";\r\n  else clase = \"alert alert-succes\";\r\n\r\n  return clase;\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport { revisarPresupuesto } from \"../Helper\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ControlPresupuesto = ({ presupuesto, restante }) => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"alert alert-primary\">Presupuesto: $ {presupuesto}</div>\r\n      <div className={revisarPresupuesto(presupuesto, restante)}>\r\n        Restante: $ {restante}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ControlPresupuesto;\r\n\r\nControlPresupuesto.propTypes = {\r\n  presupuesto: PropTypes.number.isRequired,\r\n  restante: PropTypes.number.isRequired,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport Pregunta from \"./components/Pregunta\";\nimport Formulario from \"./components/Formulario\";\nimport Listado from \"./components/Listado\";\nimport ControlPresupuesto from \"./components/ControlPresupuesto\";\n\nfunction App() {\n  const [presupuesto, setpresupuesto] = useState(0);\n  const [restante, setrestante] = useState(0);\n  const [mostrarpregunta, setMostrarpregunta] = useState(true);\n  const [gastos, setGastos] = useState([]);\n  const [gasto, setGasto] = useState({});\n  const [crearGasto, setCrearGasto] = useState(false);\n\n  useEffect(() => {\n    if (crearGasto) {\n      setGastos([...gastos, gasto]);\n      setCrearGasto(false);\n      setrestante(restante - gasto.cantidad)\n    }\n  }, [gasto, crearGasto, gastos, restante]);\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Gasto Semanal</h1>\n        <div className=\"contenido-principal\">\n          {mostrarpregunta ? (\n            <Pregunta\n              setpresupuesto={setpresupuesto}\n              setrestante={setrestante}\n              setMostrarpregunta={setMostrarpregunta}\n            ></Pregunta>\n          ) : (\n            <div className=\"row\">\n              <div className=\"one-half column\">\n                <Formulario\n                  setGasto={setGasto}\n                  setCrearGasto={setCrearGasto}\n                ></Formulario>\n              </div>\n              <div className=\"one-half column\">\n                <Listado gastos={gastos}></Listado>\n                <ControlPresupuesto\n                  presupuesto={presupuesto}\n                  restante={restante}\n                ></ControlPresupuesto>\n              </div>\n            </div>\n          )}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}